name: Build & Release

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
      - develop
    paths:
      - "src/**"
      - "data/**"
      - "vcpkg.json"
      - "premake5.lua"
      - "*.sql"
      - "key.pem"
      - "config.lua.dist"
      - "docker/entrypoint.sh"
      - "docker/Dockerfile.*"
  push:
    branches:
      - master
      - develop
    paths:
      - "src/**"
      - "data/**"
      - "vcpkg.json"
      - "premake5.lua"
      - "*.sql"
      - "key.pem"
      - "config.lua.dist"
      - "docker/entrypoint.sh"
      - "docker/Dockerfile.*"

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      release-version: ${{ steps.extract_version.outputs.RELEASE_VERSION }}
      is-prerelease: ${{ steps.prerelease_check.outputs.IS_PRERELEASE }}
      change-type: ${{ steps.detect_changes.outputs.CHANGE_TYPE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Change Type
        id: detect_changes
        run: |
          # Get the list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD || echo "")
          echo "Changed files: $CHANGED_FILES"

          # Default to 'unknown' for new branches or first commits
          CHANGE_TYPE="unknown"

          # Check for each type of change in order of priority
          if echo "$CHANGED_FILES" | grep -q "vcpkg.json"; then
            CHANGE_TYPE="base"
          elif echo "$CHANGED_FILES" | grep -qE "^src/|premake5.lua"; then
            CHANGE_TYPE="compiled"
          elif echo "$CHANGED_FILES" | grep -qE "^data/|config.lua.dist|\.sql$|key.pem|docker/entrypoint.sh"; then
            CHANGE_TYPE="datapack"
          fi

          echo "Detected change type: $CHANGE_TYPE"
          echo "CHANGE_TYPE=${CHANGE_TYPE}" >> $GITHUB_OUTPUT

      - name: Use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - name: Install Semantic Release
        run: |
          npm install semantic-release @semantic-release/github --save-dev
          npm install conventional-changelog-eslint --save-dev

      # https://github.com/semantic-release/semantic-release/issues/1592#issuecomment-902533435
      # Semantic-release doesn't support pathing to a config file unless using a .js config,
      # instead copy the file to the root as a workaround to maintain workflow separation.
      - name: Copy Release Config to Root
        run: |
          cp .github/.releaserc ./

      # Ensure that only one rc pre-release is active at a time by deleting the latest pre-release
      # and its corresponding tag on the 'develop' branch. This avoids clutter from multiple rc
      # releases after each merge into the develop branch.
      - name: Delete Existing Pre-release and Tag (Develop Branch Only)
        if: github.ref == 'refs/heads/develop'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_prerelease_tag=$(gh release list --limit 1 --json tagName,isPrerelease \
            --jq '.[] | select(.isPrerelease) | .tagName')

          if [ -n "$latest_prerelease_tag" ]; then
            gh release delete "$latest_prerelease_tag" --yes --cleanup-tag
          fi

      - name: Semantic Release (Dry Run for PRs)
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --ci --dry-run

      - name: Semantic Release (Full Release on Push)
        id: semantic_release
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: semantic-release:*
        run: npx semantic-release --ci

      # https://semantic-release.gitbook.io/semantic-release/usage/workflow-configuration#pre-release-branches
      # Semantic-release appends a numerical suffix to all pre-releases by default (e.g., `v0.0.1-rc.1`).
      # Currently, this behavior is not configurable via CLI or the release config. For improved readability
      # and consistency, this step renames the tag and associated release by removing the numerical suffix
      # from the rc pre-release (e.g., renaming `v0.0.1-rc.1` to `v0.0.1-rc`).
      - name: Rename Release Candidate Release Tag (Develop Branch Only)
        if: github.ref == 'refs/heads/develop'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_tag=$(gh release list --limit 1 --json tagName,isPrerelease --jq '.[] | select(.isPrerelease) | .tagName')
          if [[ $latest_tag == *"-rc."* ]]; then
            new_tag=${latest_tag%-rc.*}-rc
            new_name="Release ${new_tag}"
            gh release edit "$latest_tag" --tag "$new_tag" --title "$new_name"
            git tag $new_tag $latest_tag  # Create the new tag pointing to the same commit
            git tag -d $latest_tag  # Delete the old tag locally
            git push origin $new_tag  # Push the new tag to the remote
            git push origin :refs/tags/$latest_tag  # Delete the old tag on the remote
          fi

      - name: Extract Release Version
        id: extract_version
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "RELEASE_VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Determine if Pre-release
        id: prerelease_check
        run: |
          if [[ "${{ steps.extract_version.outputs.RELEASE_VERSION }}" == *"-"* ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
          fi

  build-base:
    runs-on: ubuntu-latest
    needs: release
    permissions:
      packages: write
    if: ${{ needs.release.outputs.change-type == 'base' || needs.release.outputs.change-type == 'unknown' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: image=moby/buildkit:latest,network=host

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Restore vcpkg cache
        uses: actions/cache@v3
        with:
          path: /bts/vcpkg/installed
          key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-

      - name: Set Base Image Tags
        id: set_base_tags
        run: |
          BASE_TAGS="ghcr.io/${{ github.repository }}-base:${{ needs.release.outputs.release-version }}"
          if [ "${{ needs.release.outputs.is-prerelease }}" = "true" ]; then
            BASE_TAGS="$BASE_TAGS,ghcr.io/${{ github.repository }}-base:rc"
          else
            BASE_TAGS="$BASE_TAGS,ghcr.io/${{ github.repository }}-base:latest"
          fi
          echo "BASE_TAGS=${BASE_TAGS}" >> $GITHUB_OUTPUT

      - name: Restore Docker layer cache for base
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-base
          key: docker-cache-base-${{ runner.os }}-${{ hashFiles('docker/Dockerfile.base', 'vcpkg.json') }}
          restore-keys: |
            docker-cache-base-${{ runner.os }}-

      - name: Build Base Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile.base
          push: true
          tags: ${{ steps.set_base_tags.outputs.BASE_TAGS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-compiled:
    runs-on: ubuntu-latest
    needs: [release, build-base]
    permissions:
      packages: write
    if: ${{ always() && (needs.build-base.result == 'success' || needs.release.outputs.change-type == 'compiled' || github.event_name == 'workflow_dispatch') }}
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        include:
          - platform: linux/amd64
            release_arch: release_64
          - platform: linux/arm64
            release_arch: release_arm64

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: image=moby/buildkit:latest,network=host

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set Compiled Image Tags
        id: set_compiled_tags
        run: |
          # Convert platform to tag-safe format (replace / with -)
          PLATFORM_TAG="${{ matrix.platform }}"
          PLATFORM_TAG="${PLATFORM_TAG//\//-}"

          COMPILED_TAGS="ghcr.io/${{ github.repository }}-compiled:${{ needs.release.outputs.release-version }}-${PLATFORM_TAG}"
          if [ "${{ needs.release.outputs.is-prerelease }}" = "true" ]; then
            COMPILED_TAGS="$COMPILED_TAGS,ghcr.io/${{ github.repository }}-compiled:rc-${PLATFORM_TAG}"
          else
            COMPILED_TAGS="$COMPILED_TAGS,ghcr.io/${{ github.repository }}-compiled:latest-${PLATFORM_TAG}"
          fi
          echo "COMPILED_TAGS=${COMPILED_TAGS}" >> $GITHUB_OUTPUT
          echo "PLATFORM_TAG=${PLATFORM_TAG}" >> $GITHUB_OUTPUT

      - name: Restore Docker layer cache for compiled
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-compiled
          key: docker-cache-compiled-${{ runner.os }}-${{ matrix.platform }}-${{ hashFiles('docker/Dockerfile.compiled', 'src/**', 'premake5.lua') }}
          restore-keys: |
            docker-cache-compiled-${{ runner.os }}-${{ matrix.platform }}-

      - name: Build Compiled Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile.compiled
          push: true
          tags: ${{ steps.set_compiled_tags.outputs.COMPILED_TAGS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ matrix.platform }}
          build-args: |
            RELEASE_ARCH=${{ matrix.release_arch }}
            BASE_IMAGE=ghcr.io/${{ github.repository }}-base:${{ needs.release.outputs.release-version }}

  build-datapack:
    runs-on: ubuntu-latest
    needs: [release, build-compiled]
    permissions:
      packages: write
    if: ${{ always() && (needs.build-compiled.result == 'success' || needs.release.outputs.change-type == 'datapack' || github.event_name == 'workflow_dispatch') }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: image=moby/buildkit:latest,network=host

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set Final Image Tags
        id: set_tags
        run: |
          # Set tags for the final image
          IMAGE_TAGS="ghcr.io/${{ github.repository }}:${{ needs.release.outputs.release-version }}"
          if [ "${{ needs.release.outputs.is-prerelease }}" = "true" ]; then
            IMAGE_TAGS="$IMAGE_TAGS,ghcr.io/${{ github.repository }}:rc"
          else
            IMAGE_TAGS="$IMAGE_TAGS,ghcr.io/${{ github.repository }}:latest"
          fi
          echo "IMAGE_TAGS=${IMAGE_TAGS}" >> $GITHUB_OUTPUT

          # Choose the appropriate compiled image reference based on change type
          if [ "${{ needs.release.outputs.change-type }}" = "datapack" ]; then
            # For data-only changes, use latest compiled image if available
            echo "Using existing latest compiled image if available"
            COMPILED_REF="ghcr.io/${{ github.repository }}-compiled:latest-linux-amd64"
          else
            # For code/base changes, use the specific version
            echo "Using specific version compiled image"
            COMPILED_REF="ghcr.io/${{ github.repository }}-compiled:${{ needs.release.outputs.release-version }}-linux-amd64"
          fi
          echo "COMPILED_REF=${COMPILED_REF}" >> $GITHUB_OUTPUT

      # For data-only changes, ensure a compiled image exists
      - name: Check compiled image availability
        id: check_image
        if: ${{ needs.release.outputs.change-type == 'datapack' }}
        run: |
          # Try to pull the image to check if it exists
          if docker pull ${{ steps.set_tags.outputs.COMPILED_REF }} &>/dev/null; then
            echo "Compiled image found in registry"
            echo "NEED_LOCAL_BUILD=false" >> $GITHUB_OUTPUT
          else
            echo "Compiled image not found in registry, will need to build locally"
            echo "NEED_LOCAL_BUILD=true" >> $GITHUB_OUTPUT
          fi

      # Build the compiled image locally if needed
      - name: Build compiled image locally
        if: ${{ steps.check_image.outputs.NEED_LOCAL_BUILD == 'true' }}
        run: |
          # First try to get the base image
          if ! docker pull ghcr.io/${{ github.repository }}-base:latest &>/dev/null; then
            echo "Building base image locally"
            docker build -t server-base:local -f docker/Dockerfile.base .
            BASE_IMAGE="server-base:local"
          else
            echo "Using existing base image from registry"
            BASE_IMAGE="ghcr.io/${{ github.repository }}-base:latest"
          fi

          # Build the compiled image
          echo "Building compiled image locally with base: $BASE_IMAGE"
          docker build \
            --build-arg BASE_IMAGE=$BASE_IMAGE \
            --build-arg RELEASE_ARCH=release_64 \
            -t server-compiled:local \
            -f docker/Dockerfile.compiled .

          echo "COMPILED_IMAGE=server-compiled:local" >> $GITHUB_ENV

      - name: Restore Docker layer cache for datapack
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-datapack
          key: docker-cache-datapack-${{ runner.os }}-${{ hashFiles('docker/Dockerfile.datapack', 'data/**', '*.sql', 'key.pem', 'config.lua.dist', 'docker/entrypoint.sh') }}
          restore-keys: |
            docker-cache-datapack-${{ runner.os }}-

      - name: Build Datapack Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile.datapack
          push: true
          tags: ${{ steps.set_tags.outputs.IMAGE_TAGS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            APP_IMAGE=${{ env.COMPILED_IMAGE || steps.set_tags.outputs.COMPILED_REF }}
